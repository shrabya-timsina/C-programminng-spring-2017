#include "logic.h"


game* new_game(unsigned int nrows, unsigned int ncols, enum type type) {
    if (nrows < 2 || ncols < 2) {
        // raise error
    }
    game* new = (game*) malloc(sizeof(game));
    new -> b = board_new(nrows, ncols, type);
    new -> next = BLACK_NEXT;
    black_pos_1 = make_pos(nrow / 2, ncol / 2);
    white_pos_1 = make_pos((nrow / 2) + 1), ncol / 2);
    black_pos_2 = make_pos((nrow / 2) + 1), (ncol / 2) + 1);
    white_pos_2 = make_pos(nrow / 2, (ncol / 2) + 1));
    board_set(new -> b, black_pos_1, BLACK);
    board_set(new -> b, white_pos_1, WHITE);
    board_set(new -> b, black_pos_2, BLACK);
    board_set(new -> b, white_pos_2, WHITE);

    return new;
}

void check_empty_or_same_colour(pos p, board* b, int* flank) {
    square pos_status = board_get(b, check_pos);
    if (pos_status == EMPTY) {
        break;
        return;
    }
    if (pos_status == player_col) {
        *flank = 1;
        break;
        return;
    } 
}

void outflank_checker(board* b, pos p, unsigned int direction, 
                      int* flank, square player_col) {
    pos check_pos;
    square pos_status;
    switch(direction) {
        case 0: // horizontal rightward
            check_pos = make_pos(p.r, p.c + 1);
        case 1: // horizontal leftward
            check_pos = make_pos(p.r, p.c - 1);
        case 2: // vertical upward
            check_pos = make_pos(p.r - 1, p.c);
        case 3: // vertical downward
            check_pos = make_pos(p.r + 1, p.c);
        case 4: // diagnol right-up
            check_pos = make_pos(p.r - 1, p.c + 1);
        case 5: // diagnol right-down
            check_pos = make_pos(p.r + 1, p.c  + 1);
        case 6: // diagnol left-up
            check_pos = make_pos(p.r - 1, p.c - 1);
        case 7: // diagnol left-down
            check_pos = make_pos(p.r + 1, p.c - 1);
    }
    pos_status = board_get(b, check_pos); 
    if (pos_status == EMPTY || pos_status == player_col) { 
        return; // checking immediate next position
    } else {
        unsigned int i, j;
        switch(direction) {
            case 0: // horizontal rightward
                for(j = p.c + 2; j < (b -> ncols); j++) {
                    check_pos = make_pos(p.r, j);
                    check_empty_or_same_colour(check_pos, b, flank);
                    if (*flank == 1) { return;}
                }
            case 1: // horizontal leftward
                for(j = p.c - 2; j >= 0; j--) {
                    check_pos = make_pos(p.r, j);
                    check_empty_or_same_colour(check_pos, b, flank);
                    if (*flank == 1) { return;}
                }
            case 2: // vertical upward
                for(i = p.r - 2; i >= 0; i--) {
                    check_pos = make_pos(i, p.c);               
                    check_empty_or_same_colour(check_pos, b, flank);
                    if (*flank == 1) { return;}
                }
            case 3: // vertical downward
                for(i = p.r + 2; i < (b -> nrows); i++) {
                    check_pos = make_pos(i, p.c);               
                    check_empty_or_same_colour(check_pos, b, flank);
                    if (*flank == 1) { return;}
                }
            case 4: // diagnol right-up
                for(i = p.r - 2, j = p.c + 2; i >= 0 && j < (b -> ncols); i--, j++) {
                    check_pos = make_pos(i, j);               
                    check_empty_or_same_colour(check_pos, b, flank);
                    if (*flank == 1) { return;}
                }
            case 5: // diagnol right-down
                for(i = p.r + 2, j = p.c + 2; i < (b -> nrows) && j < (b -> ncols); i++, j++) {
                    check_pos = make_pos(i, j);               
                    check_empty_or_same_colour(check_pos, b, flank);
                    if (*flank == 1) { return;}
                }
            case 6: // diagnol left-up
                for(i = p.r - 2, j = p.c - 2; i >= 0 && j >= 0; i--, j--) {
                    check_pos = make_pos(i, j);               
                    check_empty_or_same_colour(check_pos, b, flank);
                    if (*flank == 1) { return;}
                }
            case 7: // diagnol left-down
                for(i = p.r + 2, j = p.c - 2; i < (b -> nrows) && j >= 0; i++, j--) {
                    check_pos = make_pos(i, j);               
                    check_empty_or_same_colour(check_pos, b, flank);
                    if (*flank == 1) { return;}
                }
        }
    }
}

int outflanks(game* g, pos p) {
    int oflank_status = 0;
    square player_col;
    switch(g -> next) {
        case BLACK_NEXT:
            square player_col = BLACK;
        case WHITE_NEXT:
            square player_col = WHITE; 
    }
    
    // checking horizontally rightward
    outflank_checker(b, p, 0, &oflank_status, player_col);
    // checking horizontally leftward
    outflank_checker(b, p, 1, &oflank_status, player_col);
    // checking vertically upward
    outflank_checker(b, p, 2, &oflank_status, player_col);
    // checking vertically downward
    outflank_checker(b, p, 3, &oflank_status, player_col);
    // checking diaganolly right-up
    outflank_checker(b, p, 4, &oflank_status, player_col);
    // checking diaganolly right-down
    outflank_checker(b, p, 5, &oflank_status, player_col);
    // checking diaganolly left-up
    outflank_checker(b, p, 6, &oflank_status, player_col);
    // checking diaganolly left-down
    outflank_checker(b, p, 7, &oflank_status, player_col);

    return oflank_status;
}

poslist* flips(game* g, pos p) {
    
}
